CREATE TABLE USER_BANK (
    USER_ID INT PRIMARY KEY,
    FULL_NAME VARCHAR2(255),
    DPI VARCHAR2(50),
    EMAIL VARCHAR2(100),
    PHONE_NUMBER VARCHAR2(50),
    DATE_OF_BIRTH DATE,
    ADDRESS VARCHAR2(255),
    REGISTRATION_DATE TIMESTAMP,
    STATUS VARCHAR2(50) CHECK (STATUS IN ('ACTIVE', 'INACTIVE'))
);

CREATE TABLE SAVINGS_ACCOUNT (
    ACCOUNT_ID INT PRIMARY KEY,
    USER_ID INT,
    ACCOUNT_NUMBER VARCHAR2(50) UNIQUE,
    ACCOUNT_TYPE VARCHAR2(50),
    BALANCE DECIMAL(10,2) CHECK (BALANCE >= 0),
    CURRENCY VARCHAR2(50),
    CREATION_DATE TIMESTAMP,
    STATUS VARCHAR2(50) CHECK (STATUS IN ('ACTIVE', 'INACTIVE')),
    FOREIGN KEY (USER_ID) REFERENCES USER_BANK(USER_ID)
);

CREATE TABLE CARD (
    CARD_ID INT PRIMARY KEY,
    USER_ID INT,
    ACCOUNT_ID INT,
    CARD_NUMBER VARCHAR2(50) UNIQUE,
    CARD_TYPE VARCHAR2(50),
    CVV VARCHAR2(10),
    PIN VARCHAR2(10),
    EXPIRATION_DATE DATE,
    STATUS VARCHAR2(50) CHECK (STATUS IN ('ACTIVE', 'INACTIVE', 'BLOCKED')),
    FOREIGN KEY (USER_ID) REFERENCES USER_BANK(USER_ID),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES SAVINGS_ACCOUNT(ACCOUNT_ID)
);




CREATE TABLE LOAN (
    LOAN_ID INT PRIMARY KEY,
    ACCOUNT_ID INT,
    USER_ID INT,
    CURRENCY VARCHAR2(50),
    INTEREST_RATE DECIMAL(10,2) CHECK (INTEREST_RATE >= 0),
    TERM_MONTHS INT CHECK (TERM_MONTHS > 0),
    START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR2(50) CHECK (STATUS IN ('ACTIVE', 'PAID', 'DEFAULTED')),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES SAVINGS_ACCOUNT(ACCOUNT_ID),
    FOREIGN KEY (USER_ID) REFERENCES USER_BANK(USER_ID)
    
);

CREATE TABLE PAYMENT (
    PAYMENT_ID INT PRIMARY KEY,
    LOAN_ID INT,
    AMOUNT DECIMAL(10,2) CHECK (AMOUNT > 0),
    PAYMENT_DATE DATE,
    STATUS VARCHAR2(50) CHECK (STATUS IN ('PENDING', 'COMPLETED', 'FAILED')),
    FOREIGN KEY (LOAN_ID) REFERENCES LOAN(LOAN_ID)
);

CREATE TABLE ATM (
    ATM_ID INT PRIMARY KEY,
    LOCATION VARCHAR2(255),
    CITY VARCHAR2(100),
    STATUS VARCHAR2(50) CHECK (STATUS IN ('ACTIVE', 'OUT_OF_SERVICE', 'MAINTENANCE')),
    CURRENCY VARCHAR2(50),
    CASH_AVAILABLE DECIMAL(10,2) CHECK (CASH_AVAILABLE >= 0),
    LAST_MAINTENANCE TIMESTAMP
);

CREATE TABLE TRANSACTION (
    ID INT PRIMARY KEY,
    SOURCE_ACCOUNT INT,
    DESTINATION_ACCOUNT INT,
    ATM_ID INT,
    CARD_ID INT,
    AMOUNT DECIMAL(10,2) CHECK (AMOUNT > 0),
    TRANSACTION_TYPE VARCHAR2(10),
    DATE_TRANSACTION TIMESTAMP,
    CURRENCY VARCHAR2(50),
    DESCRIPTION VARCHAR2(255),
    FOREIGN KEY (SOURCE_ACCOUNT) REFERENCES SAVINGS_ACCOUNT(ACCOUNT_ID),
    FOREIGN KEY (DESTINATION_ACCOUNT) REFERENCES SAVINGS_ACCOUNT(ACCOUNT_ID),
    FOREIGN KEY (ATM_ID) REFERENCES ATM(ATM_ID),
    FOREIGN KEY (CARD_ID) REFERENCES CARD(CARD_ID)
);

CREATE TABLE LOG (
    LOG_ID INT PRIMARY KEY,
    ID_TRANSACTION INT,
    ID_ATM INT,
    ACTION VARCHAR2(255),
    TIMESTAMP TIMESTAMP,
    DETAILS VARCHAR2(255),
    FOREIGN KEY (ID_TRANSACTION) REFERENCES TRANSACTION(ID),
    FOREIGN KEY (ID_ATM) REFERENCES ATM(ATM_ID)
);
